#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from dotenv import load_dotenv
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from RemAPI import get_repair_by_id
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import markups as nav
from db import BotDB
from datetime import datetime


storage = MemoryStorage()
load_dotenv()
bot = Bot(token=os.getenv('TELE_TOKEN'))
dp = Dispatcher(bot, storage=storage)


class RepairStatus(StatesGroup):
    waiting_for_repair_id = State()
    waiting_for_phone_number = State()


class PriceStatus(StatesGroup):
    waiting_for_model = State()
    waiting_for_price = State()


@dp.message_handler(commands=['start', 'help'])
async def cmd_start(message: types.Message):
    print(message.from_user.id)
    if message.from_user.id == 419685899 or 705036271:
        await bot.send_message(message.from_user.id, "–í—ñ—Ç–∞—î–º–æ, {0.first_name}!\n–¶–µ–π –±–æ—Ç –¥–æ–ø–æ–º–æ–∂–µ –í–∞–º "
                                                     "–æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å—Ç–∞–Ω —Ä–µ–º–æ–Ω—Ç—É, —Ü—ñ–Ω–∏ –Ω–∞ –ø–æ—Å–ª—É–≥–∏ —Ç–∞ —ñ–Ω—à—É –∫–æ—Ä–∏—Å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é .".format(
            message.from_user), reply_markup=nav.mainMenuExtended)
    else:
        await bot.send_message(message.from_user.id, "–í—ñ—Ç–∞—î–º–æ, {0.first_name}!\n–¶–µ–π –±–æ—Ç –¥–æ–ø–æ–º–æ–∂–µ –í–∞–º "
                     "–æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å—Ç–∞–Ω —Ä–µ–º–æ–Ω—Ç—É, —Ü—ñ–Ω–∏ –Ω–∞ –ø–æ—Å–ª—É–≥–∏ —Ç–∞ —ñ–Ω—à—É –∫–æ—Ä–∏—Å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é .".format(
                         message.from_user), reply_markup=nav.mainMenu)


@dp.message_handler()
async def bot_message(message: types.Message):
    """ processing input from keyboard"""
    if message.text == '‚öô –°—Ç–∞—Ç—É—Å —Ä–µ–º–æ–Ω—Ç—É ‚öô':
        await bot.send_message(message.from_user.id, '–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó (<i>—Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏ <s>–í–û</s><b>123456</b></i>)', parse_mode='html')
        await RepairStatus.waiting_for_repair_id.set()
    elif message.text == 'üí∏ –í–∞—Ä—Ç—ñ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç—É üí∏':
        await bot.send_message(message.chat.id, 'üíªüì± –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é: ‚åöüñ•', reply_markup=nav.catMenu)
        await PriceStatus.waiting_for_model.set()
    elif message.text == 'üì¶ –†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ù–æ–≤–æ—é –ü–æ—à—Ç–æ—é üì¶':
        await bot.send_message(message.chat.id, '<b>–†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –∞–¥—Ä–µ—Å–Ω–æ—ó –≤—ñ–¥–ø—Ä–∞–≤–∫–∏: </b>\n\n'
                                                '<i>–º. –õ—å–≤—ñ–≤, –≤—É–ª. –ö. –õ–µ–≤–∏—Ü—å–∫–æ–≥–æ 6, </i>\n'
                                                '<i>0673233095,–æ—Ç—Ä–∏–º—É–≤–∞—á: –ì—É—Ä–º–∞–∫ –†–æ–º–∞–Ω –î–º–∏—Ç—Ä–æ–≤–∏—á.</i> \n'
                                                '–ü–µ—Ä–µ—Å–∏–ª–∫–∞ –∑–¥—ñ–π—Å–Ω—é—î—Ç—å—Å—è –∑–∞ –í–∞—à —Ä–∞—Ö—É–Ω–æ–∫. \n\n'
                                                '–í–∫–ª–∞–¥—ñ—Ç—å –±—É–¥—å –ª–∞—Å–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å –Ω–µ—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—ñ —Ç–∞'
                                                ' –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑ email –≤–∫–ª—é—á–Ω–æ.\n\n'
                                                'üçè –î–ª—è Watch, Airpods –≤–∫–∞–∂—ñ—Ç—å –≤ –æ–ø–∏—Å—ñ, –∑ —è–∫–∏–º iOs-–ø—Ä–∏—Å—Ç—Ä–æ—î–º'
                                                ' –ø—Ä–∞—Ü—é—é—Ç—å –≤ –ø–∞—Ä—ñ —Ç–∞ –≤–µ—Ä—Å—ñ—é iOs –Ω–∞ –Ω—å–æ–º—É.\n'
                                                'üçé –î–ª—è Mac, iPhone, iPad, Watch –æ–±–æ–≤\'—è–∑–∫–æ–≤–æ '
                                                '–≤–∏–º–∫–Ω—ñ—Ç—å –ª–æ–∫–∞—Ç–æ—Ä.\n\n'
                                                '‚ùóÔ∏è<b>–£ –∑–≤\'—è–∑–∫—É –∑ –¥—ñ—î—é –ø–æ–ª–æ–∂–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–π—Å—å–∫–æ–≤–∏–π —Å—Ç–∞–Ω, —Ç–µ—Ä–º—ñ–Ω —Ä–µ–º–æ–Ω—Ç—É'
                                                ' –º–æ–∂–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –¥–æ 120 –¥—ñ–±.</b>\n'
                                                '‚ùóÔ∏è<b>–°–µ—Ä–≤—ñ—Å–Ω–∏–π —Ü–µ–Ω—Ç—Ä –Ω–µ –Ω–µ—Å–µ –≤—ñ–¥–ø–æ–≤—ñ–ª—å–Ω–æ—Å—Ç—ñ –∑–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó,'
                                                ' –±—É–¥—å –ª–∞—Å–∫–∞ –ø–µ—Ä–µ–¥ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è–º –∑–±–µ—Ä–µ–∂—ñ—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é,'
                                                ' —è–∫—â–æ —Ü–µ –º–æ–∂–ª–∏–≤–æ.</b>\n'
                                                '‚ùóÔ∏è<b>–ù–∞–Ω–µ—Å–µ–Ω–µ –∑–∞—Ö–∏—Å–Ω–µ —Å–∫–ª–æ —á–∏ –ø–ª—ñ–≤–∫–∞ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –¥–µ–º–æ–Ω—Ç–æ–≤–∞–Ω—ñ,'
                                                ' —ó—Ö–Ω—è —Ü—ñ–ª—ñ—Å–Ω—ñ—Å—Ç—å —Ç–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–µ –≥–∞—Ä–∞–Ω—Ç—É—é—Ç—å—Å—è.</b> '
                                                , parse_mode='html')
    elif message.text == 'üìç –ö–æ–Ω—Ç–∞–∫—Ç–∏, –≥—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏ üìç':
        await bot.send_message(message.chat.id, '<b>–ù–∞—à–∞ –∞–¥—Ä–µ—Å–∞: </b>\n\n'
                                                '<i>–º. –õ—å–≤—ñ–≤, –≤—É–ª. –ö. –õ–µ–≤–∏—Ü—å–∫–æ–≥–æ 6, </i>\n'
                                                '<i>0800-330-434, 067-323-30-95.</i> \n'
                                                '<i>www.rosan-service.com.ua </i>\n\n'
                                                '<b>–ì—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏: </b>\n\n'
                                                '<i>–ü–æ–Ω–µ–¥—ñ–ª–æ–∫-–ø—è—Ç–Ω–∏—Ü—é –∑ 10:00 –¥–æ 19:00 </i>\n'
                                                '<i>–°—É–±–æ—Ç–∞ –∑ 11:00 –¥–æ 16:00.</i> \n'
                                                '<i>–ù–µ–¥—ñ–ª—è - –≤–∏—Ö—ñ–¥–Ω–∏–π </i>\n\n', parse_mode='html')
    elif message.text == 'üí≥ –†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏ üí≥':
        await bot.send_message(message.chat.id, '<b>–û–¥–µ—Ä–∂—É–≤–∞—á –ø–ª–∞—Ç–µ–∂—É: </b>\n\n'
                                                '<b>–ù–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è –æ–¥–µ—Ä–∂—É–≤–∞—á–∞:   –§–û–ü –ì—É—Ä–º–∞–∫ –†–æ–º–∞–Ω –î–º–∏—Ç—Ä–æ–≤–∏—á </b>\n'
                                                '<b>–ö–æ–¥ –æ–¥–µ—Ä–∂—É–≤–∞—á–∞:                            2899103773</b> \n'
                                                '<b>–ù–∞–∑–≤–∞ –±–∞–Ω–∫—É:                       –ê–¢ –ö–ë ¬´–ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫¬ª </b>\n'
                                                '<b>–†–∞—Ö—É–Ω–æ–∫ –æ–¥–µ—Ä–∂—É–≤–∞—á–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ IBAN:</b> \n'
                                                '<b>UA983052990000026005011013493</b>\n\n'
                                                '<b>–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É: –û–ø–ª–∞—Ç–∞ –∑–∞ —Ä–µ–º–æ–Ω—Ç –•–•–•–•–•–•</b>\n'
                                                '<b>–°—É–º–∞ –¥–æ –æ–ø–ª–∞—Ç–∏: </b>'

                                                , parse_mode='html')

    else:
        await message.reply('–°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –º–µ–Ω—é –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /start')


@dp.callback_query_handler(lambda call: True, state=PriceStatus.waiting_for_model)
async def price_model(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    await callback_query.message.edit_reply_markup()
    buttons = []
    counter = 0
    for i in BotDB.get_model(callback_query.data):
        buttons.append([InlineKeyboardButton(i[1], callback_data=i[1])])
        counter += 1
    modMenu = InlineKeyboardMarkup(row_width=3, inline_keyboard=buttons)
    await bot.send_message(callback_query.from_user.id, f'–û–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å {callback_query.data}:', reply_markup=modMenu)
    await PriceStatus.waiting_for_price.set()


@dp.callback_query_handler(lambda call: True, state=PriceStatus.waiting_for_price)
async def price_result(callback_query: types.CallbackQuery, state: FSMContext):
    print(callback_query.from_user.first_name, callback_query.from_user.last_name, callback_query.from_user.username,
                  callback_query.data, datetime.now())
    BotDB.add_log(callback_query.from_user.first_name, callback_query.from_user.last_name, callback_query.from_user.username,
                  callback_query.data, datetime.now())
    price_out = ''
    await callback_query.message.edit_reply_markup()
    await bot.send_message(callback_query.from_user.id, f'{callback_query.data}:')
    for i in BotDB.get_price(callback_query.data):
        price_out += f'{i[0]}: {i[1]} –≥—Ä–Ω. \n'
    await bot.send_message(callback_query.from_user.id, price_out)
    await state.finish()


@dp.message_handler(state=RepairStatus.waiting_for_repair_id)
async def enter_repair_id(message : types.Message, state: FSMContext):
    print(message.from_user.first_name, message.from_user.last_name, message.from_user.id,
                  message.from_user.username,
                  message.text, datetime.now())
    BotDB.add_log(message.from_user.first_name, message.from_user.last_name,
                  message.from_user.username,
                  message.text, datetime.now())
    try:
        global data
        async with state.proxy() as data:
            data = get_repair_by_id(message.text)['data'][0]
        await bot.send_message(message.chat.id, '‚úÖ –†–µ–º–æ–Ω—Ç –∑–Ω–∞–π–¥–µ–Ω–æ ‚úÖ\n–í–∫–∞–∂—ñ—Ç—å –æ—Å—Ç–∞–Ω–Ω—ñ 4 —Ü–∏—Ñ—Ä–∏ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ–≥–æ –≤ —Ä–µ–º–æ–Ω—Ç—ñ')
        await RepairStatus.waiting_for_phone_number.set()
    except:
        await bot.send_message(message.chat.id, '‚ùå –†–µ–º–æ–Ω—Ç—É –∑ —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ‚ùå\n–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó')
        await state.finish()


@dp.message_handler(state=RepairStatus.waiting_for_phone_number)
async def enter_phone_number(message : types.Message, state: FSMContext):
    phone_matched = False
    for phone in data['client']['phone']:
        if message.text == phone[-4::]:
            phone_matched = True
    if phone_matched:
        await bot.send_message(message.chat.id, f"<b>–ü—Ä–∏—Å—Ç—Ä—ñ–π: </b><i>{data['model']}</i>\n"
                                                f"<b>–°–µ—Ä—ñ–π–Ω–∏–π –Ω–æ–º–µ—Ä: </b><i>{data['serial']}</i>\n"
                                                f"<b>–°—Ç–∞–Ω —Ä–µ–º–æ–Ω—Ç—É: </b><i>{data['status']['name']}</i>", parse_mode='html')
    else:
        await bot.send_message(message.chat.id, '‚ùå –í–≤–µ–¥–µ–Ω—ñ —Ü–∏—Ñ—Ä–∏ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å 4 –æ—Å—Ç–∞–Ω–Ω—ñ–º –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ–≥–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚ùå', parse_mode='html')
    await state.finish()

BotDB = BotDB('price.db')

def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tutorial.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)



if __name__ == '__main__':

    main()
    executor.start_polling(dp, skip_updates=True)
